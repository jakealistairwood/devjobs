[{"/Users/jakewood/development/frontendmentor/devjobs/src/App.jsx":"1","/Users/jakewood/development/frontendmentor/devjobs/src/containers/Routes.jsx":"2","/Users/jakewood/development/frontendmentor/devjobs/src/components/Searchbar/Searchbar.jsx":"3","/Users/jakewood/development/frontendmentor/devjobs/src/components/JobCard/JobCard.jsx":"4","/Users/jakewood/development/frontendmentor/devjobs/src/components/Searchbar/index.js":"5","/Users/jakewood/development/frontendmentor/devjobs/src/components/JobInfo/JobInfo.jsx":"6","/Users/jakewood/development/frontendmentor/devjobs/src/themes.js":"7","/Users/jakewood/development/frontendmentor/devjobs/src/components/Switch/Switch.jsx":"8","/Users/jakewood/development/frontendmentor/devjobs/src/components/JobLibrary/JobLibrary.jsx":"9","/Users/jakewood/development/frontendmentor/devjobs/src/components/JobLibrary/index.js":"10","/Users/jakewood/development/frontendmentor/devjobs/src/components/Switch/index.js":"11","/Users/jakewood/development/frontendmentor/devjobs/src/components/JobCard/index.js":"12","/Users/jakewood/development/frontendmentor/devjobs/src/firebase.js":"13","/Users/jakewood/development/frontendmentor/devjobs/src/components/JobInfo/index.js":"14"},{"size":5767,"mtime":1607631737020,"results":"15","hashOfConfig":"16"},{"size":1337,"mtime":1607631974638,"results":"17","hashOfConfig":"16"},{"size":2567,"mtime":1607689469949,"results":"18","hashOfConfig":"16"},{"size":1461,"mtime":1607704194899,"results":"19","hashOfConfig":"16"},{"size":63,"mtime":1605648144031,"results":"20","hashOfConfig":"16"},{"size":3123,"mtime":1607703263439,"results":"21","hashOfConfig":"16"},{"size":1343,"mtime":1607689576041,"results":"22","hashOfConfig":"16"},{"size":808,"mtime":1607340220960,"results":"23","hashOfConfig":"16"},{"size":1439,"mtime":1607631846270,"results":"24","hashOfConfig":"16"},{"size":66,"mtime":1605648014989,"results":"25","hashOfConfig":"16"},{"size":54,"mtime":1607004796483,"results":"26","hashOfConfig":"16"},{"size":57,"mtime":1605648206695,"results":"27","hashOfConfig":"16"},{"size":669,"mtime":1605993218285,"results":"28","hashOfConfig":"16"},{"size":57,"mtime":1605648282256,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"sxajiq",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"/Users/jakewood/development/frontendmentor/devjobs/src/App.jsx",["64","65","66","67","68","69","70"],"import React, { useState, useEffect } from 'react';\nimport JobLibrary from './components/JobLibrary/index';\nimport Routes from './containers/Routes';\nimport { Link, navigate }from '@reach/router';\nimport firebase from './firebase';\nimport NavbarBanner from './assets/design/Desktop/bg-pattern-header.svg';\nimport Logo from './assets/design/Desktop/logo.svg';\nimport './App.scss';\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { lightTheme, darkTheme, GlobalStyles } from \"./themes\";\nimport Switch from './components/Switch';\n\n// Styled Component \nconst StyledApp = styled.div`\n`\n\nconst App = () => {\n\n  /* =============================================\n                       State  \n  ============================================== */\n\n  // State change for API data inc. search functionality \n  const [ jobs, setJobs ] = useState([]);\n  const [ currentJob, setCurrentJob ] = useState({});\n  const [ searchJobs, setSearchJobs ] = useState();\n  const [ jobLocation, setJobLocation ] = useState();\n  const [ fullTime, setFullTime ] = useState(false);\n\n  // State change for API pagination\n  const [ jobsOnDisplay, setJobsOnDisplay ] = useState(21);\n\n  // State change for user authentication \n  const [ user, setUser ] = useState(null);\n\n  // State for light/dark mode toggle button\n  const [ isToggled, setIsToggled ] = useState(false);\n\n  // State for setting light/dark mode theme\n  const [theme, setTheme] = useState(\"light\");\n\n  const toggleTheme = () => {\n    theme === \"light\" ? setTheme(\"dark\") : setTheme(\"light\");\n  }\n\n  /* =============================================\n                 User Authentication\n  ============================================== */\n\n  // // Clear Inputs\n\n  // const clearInputs = () => {\n  //   setEmail('');\n  //   setPassword('');\n  // }\n\n  // // Clear Errors\n\n  // const clearErrors = () => {\n  //   setUserEmailError('');\n  //   setUserPasswordError('');\n  // }\n\n  // // Login functionality\n  // const handleUserLogin = () => {\n  //   clearErrors()\n  //   firebase.auth().signInWithEmailAndPassword(email, password).catch(error => {\n  //     switch(error.code) {\n  //       case \"auth/invalid-email\":\n  //       case \"auth/user-disabled\":\n  //       case \"auth/user-not-found\":\n  //         setUserEmailError(error.message);\n  //         break;\n  //       case \"auth/wrong-password\": \n  //         setUserPasswordError(error.message);\n  //         break;\n  //     }\n  //   })\n  //   navigate(\"/job-library\")\n  // }\n\n  // // Signup functionality \n  // const handleUserSignUp = () => {\n  //   clearErrors();\n  //   firebase.auth().createUserWithEmailAndPassword(email, password).catch(error => {\n  //     switch(error.code) {\n  //       case \"auth/email-provided-already-in-use\":\n  //       case \"auth/email-invalid-try-again\":\n  //         setUserEmailError(error.message);\n  //         break;\n  //       case \"auth/weak-password\": \n  //         setUserPasswordError(error.message);\n  //         break;\n  //     }  \n  //   })\n  //   navigate(\"/job-library\")\n  // }\n\n  // // Logout functionality \n\n  // const handleUserLogOut = () => {\n  //   firebase.auth().signOut();\n  // }\n\n  // // Check user exists functionality\n\n  // const checkUserExists = () => {\n  //   firebase.auth().onAuthStateChanged(user => {\n  //     if (user) {\n  //       clearInputs();\n  //       setUser(user);\n  //     } else {\n  //       setUser(\"\");\n  //     }\n  //   })  \n  // }\n\n  /* =============================================\n                    Fetch API Data  \n  ============================================== */\n  // Get API Data functionality\n  const getJobs = () => {\n\n    const searchByJobDescription = searchJobs ? `?description=${searchJobs}` : \"\";\n    const searchByJobLocation = jobLocation ? `?location=${jobLocation}` : \"\";\n    const jobFullTime = fullTime ? `?full_time=${fullTime}` : \"\";\n\n    const url = `https://jobs.github.com/positions.json${searchByJobDescription}${searchByJobLocation}${jobFullTime}`;\n\n    // Prevent CORS issue blocking access to Github jobs API\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\n    fetch(proxyurl + url)\n      .then((response) => response.json())\n      .then((response) =>  {\n        console.log(response);\n        setJobs(response);\n      })\n      .catch(() => console.log(\"Can't access \" + url + \" response. Blocked by browser?\"))\n  }\n\n  useEffect(() => {\n    getJobs();\n  }, []);\n\n  const renderJobs = jobs \n  ? <Routes jobs={jobs} \n            getJobs={getJobs} \n            jobsOnDisplay={jobsOnDisplay}\n            setJobsOnDisplay={setJobsOnDisplay}\n            searchJobs={searchJobs} \n            setSearchJobs={setSearchJobs} \n            jobLocation={jobLocation}\n            setJobLocation={setJobLocation}\n            fullTime={fullTime}\n            setFullTime={setFullTime}\n            currentJob={currentJob}\n            setCurrentJob={setCurrentJob}\n    /> \n  : <div className=\"loadingScreen\">\n      <h3>Loading ...</h3>\n    </div>\n\n  return (\n    <ThemeProvider theme={theme === \"light\" ? lightTheme : darkTheme}>\n      <GlobalStyles />\n      <StyledApp>\n      <header className=\"navbar\">\n        <nav className=\"navbar__container\">\n          <Link to=\"/\">\n            <img src={Logo} alt=\"devjobs-logo\" />\n          </Link>\n          <div className=\"navbar__toggle\">\n            {/* <img src={user.providerData[0].photoURL} alt=\"\"/> */}\n            <Switch isToggled={isToggled} \n                    onToggle={() => {\n                        setIsToggled(!isToggled)\n                    }} \n                    toggleTheme={toggleTheme}\n            />\n          </div>\n        </nav>\n      </header>\n      <main className=\"page__container\">\n        {renderJobs}\n      </main>\n      </StyledApp>\n    </ThemeProvider>\n  )\n}\n\nexport default App;\n\n","/Users/jakewood/development/frontendmentor/devjobs/src/containers/Routes.jsx",[],["71","72"],"/Users/jakewood/development/frontendmentor/devjobs/src/components/Searchbar/Searchbar.jsx",["73","74","75","76"],"import React from 'react';\nimport styles from './Searchbar.module.scss';\nimport SearchIcon from '../../assets/design/Desktop/icon-search.svg';\nimport FilterIcon from '../../assets/design/Desktop/icon-location.svg';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { lightTheme, darkTheme, GlobalStyles } from \"../../themes\";\n\nconst StyledSearchBar = styled.form`\n    background-color: ${props => props.theme.form}\n`\nconst StyledSearch = styled.div`\n    border-right: 1px solid ${props => props.theme.border}\n`\nconst StyledLabel = styled.label`\n    color: ${props => props.theme.ftLabel}\n`\n\nconst Searchbar = (props) => {\n\n    const { getJobs,  \n            searchJobs, \n            setSearchJobs, \n            jobLocation, \n            setJobLocation,\n            fullTime,\n            setFullTime } = props;\n\n    return (\n        <StyledSearchBar className={styles.search}>\n            <StyledSearch className={styles.search__filterOne}>\n                <img src={SearchIcon} alt=\"magnifying-glass-icon\" />\n                <label for=\"searchByJob\"></label>\n                <input \n                    type=\"text\" \n                    id=\"searchByJob\" \n                    placeholder=\"Filter by title, companies, expertise...\"\n                    value={searchJobs}\n                    onChange={(e) => {\n                        setSearchJobs(e.target.value);\n                        getJobs();\n                    }} \n                />\n            </StyledSearch>\n            <StyledSearch className={styles.search__filterTwo}>\n                <img src={FilterIcon} alt=\"location-pin-icon\" />\n                <label for=\"searchByLocation\"></label>\n                <input type=\"text\" \n                       id=\"searchByLocation\" \n                       placeholder=\"Filter by location...\"\n                       value={jobLocation}\n                       onChange={(e) => {\n                           setJobLocation(e.target.value)\n                           getJobs();\n                       }}\n                />\n            </StyledSearch>  \n            <div className={styles.search__filterThree}>\n                <input type=\"checkbox\" id=\"fullTimeCheckbox\" onClick={() => {\n                    setFullTime(!fullTime)\n                    getJobs();\n                }} />\n                <StyledLabel for=\"fullTimeCheckbox\" className={styles.fullTimeLabel}>Full Time Only</StyledLabel>\n                <button className={styles.primaryBtn}>Search</button>\n            </div>   \n        </StyledSearchBar>   \n    )\n}\n\nexport default Searchbar;\n","/Users/jakewood/development/frontendmentor/devjobs/src/components/JobCard/JobCard.jsx",["77","78","79","80","81","82"],"/Users/jakewood/development/frontendmentor/devjobs/src/components/Searchbar/index.js",[],"/Users/jakewood/development/frontendmentor/devjobs/src/components/JobInfo/JobInfo.jsx",["83","84","85","86"],"/Users/jakewood/development/frontendmentor/devjobs/src/themes.js",[],"/Users/jakewood/development/frontendmentor/devjobs/src/components/Switch/Switch.jsx",["87","88"],"import React from 'react';\nimport styles from './Switch.module.scss';\nimport SunIcon from '../../assets/design/Desktop/icon-sun.svg';\nimport MoonIcon from '../../assets/design/Desktop/icon-moon.svg';\n\nconst Switch = (props) => {\n\n    const { isToggled, onToggle, toggleTheme } = props;\n\n    return (\n        <div className={styles.toggleContainer}>\n            <img src={SunIcon} />\n            <label id=\"toggleSwitch\" className={styles.themeSwitch}>\n                <input type=\"checkbox\" id=\"toggleSwitch\" checked={isToggled} onChange={() =>{\n                    onToggle()\n                    toggleTheme()\n                }}\n                />\n                <span className={styles.themeSlider} />\n            </label>\n            <img src={MoonIcon} />\n        </div>\n    )\n}\n\nexport default Switch;\n","/Users/jakewood/development/frontendmentor/devjobs/src/components/JobLibrary/JobLibrary.jsx",[],"/Users/jakewood/development/frontendmentor/devjobs/src/components/JobLibrary/index.js",[],["89","90"],"/Users/jakewood/development/frontendmentor/devjobs/src/components/Switch/index.js",[],"/Users/jakewood/development/frontendmentor/devjobs/src/components/JobCard/index.js",[],["91","92"],"/Users/jakewood/development/frontendmentor/devjobs/src/firebase.js",[],"/Users/jakewood/development/frontendmentor/devjobs/src/components/JobInfo/index.js",[],{"ruleId":"93","severity":1,"message":"94","line":2,"column":8,"nodeType":"95","messageId":"96","endLine":2,"endColumn":18},{"ruleId":"93","severity":1,"message":"97","line":4,"column":16,"nodeType":"95","messageId":"96","endLine":4,"endColumn":24},{"ruleId":"93","severity":1,"message":"98","line":5,"column":8,"nodeType":"95","messageId":"96","endLine":5,"endColumn":16},{"ruleId":"93","severity":1,"message":"99","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":20},{"ruleId":"93","severity":1,"message":"100","line":34,"column":11,"nodeType":"95","messageId":"96","endLine":34,"endColumn":15},{"ruleId":"93","severity":1,"message":"101","line":34,"column":17,"nodeType":"95","messageId":"96","endLine":34,"endColumn":24},{"ruleId":"102","severity":1,"message":"103","line":144,"column":6,"nodeType":"104","endLine":144,"endColumn":8,"suggestions":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"93","severity":1,"message":"110","line":5,"column":18,"nodeType":"95","messageId":"96","endLine":5,"endColumn":31},{"ruleId":"93","severity":1,"message":"111","line":6,"column":10,"nodeType":"95","messageId":"96","endLine":6,"endColumn":20},{"ruleId":"93","severity":1,"message":"112","line":6,"column":22,"nodeType":"95","messageId":"96","endLine":6,"endColumn":31},{"ruleId":"93","severity":1,"message":"113","line":6,"column":33,"nodeType":"95","messageId":"96","endLine":6,"endColumn":45},{"ruleId":"93","severity":1,"message":"114","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":26},{"ruleId":"93","severity":1,"message":"110","line":4,"column":19,"nodeType":"95","messageId":"96","endLine":4,"endColumn":32},{"ruleId":"93","severity":1,"message":"111","line":5,"column":10,"nodeType":"95","messageId":"96","endLine":5,"endColumn":20},{"ruleId":"93","severity":1,"message":"112","line":5,"column":22,"nodeType":"95","messageId":"96","endLine":5,"endColumn":31},{"ruleId":"93","severity":1,"message":"113","line":5,"column":33,"nodeType":"95","messageId":"96","endLine":5,"endColumn":45},{"ruleId":"93","severity":1,"message":"115","line":13,"column":18,"nodeType":"95","messageId":"96","endLine":13,"endColumn":28},{"ruleId":"93","severity":1,"message":"116","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":25},{"ruleId":"93","severity":1,"message":"114","line":1,"column":27,"nodeType":"95","messageId":"96","endLine":1,"endColumn":36},{"ruleId":"117","severity":1,"message":"118","line":61,"column":21,"nodeType":"119","endLine":61,"endColumn":33},{"ruleId":"117","severity":1,"message":"118","line":67,"column":17,"nodeType":"119","endLine":67,"endColumn":29},{"ruleId":"120","severity":1,"message":"121","line":12,"column":13,"nodeType":"119","endLine":12,"endColumn":34},{"ruleId":"120","severity":1,"message":"121","line":21,"column":13,"nodeType":"119","endLine":21,"endColumn":35},{"ruleId":"106","replacedBy":"122"},{"ruleId":"108","replacedBy":"123"},{"ruleId":"106","replacedBy":"124"},{"ruleId":"108","replacedBy":"125"},"no-unused-vars","'JobLibrary' is defined but never used.","Identifier","unusedVar","'navigate' is defined but never used.","'firebase' is defined but never used.","'NavbarBanner' is defined but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getJobs'. Either include it or remove the dependency array.","ArrayExpression",["126"],"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"'ThemeProvider' is defined but never used.","'lightTheme' is defined but never used.","'darkTheme' is defined but never used.","'GlobalStyles' is defined but never used.","'useEffect' is defined but never used.","'currentJob' is assigned a value but never used.","'useState' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["127"],["128"],["127"],["128"],{"desc":"129","fix":"130"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [getJobs]",{"range":"131","text":"132"},[4382,4384],"[getJobs]"]